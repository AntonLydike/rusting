use std::path::Path;
use std::fs::File;
use std::io::BufWriter;
use rayon::prelude::*;

mod complex;
use complex::*;

type Compl = Complex<f32>;

const COLORS: [(u8,u8, u8); 255] = [(0,7,100), (1,10,103), (2,12,106), (3,15,108), (4,17,111), (4,20,113), (5,22,116), (6,25,118), (7,27,121), (8,29,123), (8,32,126), (9,34,128), (10,37,131), (11,39,133), (11,42,136), (12,44,138), (13,47,141), (14,49,143), (15,51,146), (15,54,148), (16,56,151), (17,59,153), (18,61,156), (18,64,158), (19,66,161), (20,68,163), (21,71,166), (22,73,168), (22,76,171), (23,78,173), (24,81,176), (25,83,178), (25,86,181), (26,88,183), (27,90,186), (28,93,188), (29,95,191), (29,98,193), (30,100,196), (31,103,198), (32,105,201), (32,107,203), (36,110,204), (39,112,205), (42,114,206), (45,116,207), (48,119,207), (51,121,208), (54,123,209), (57,125,210), (60,127,210), (63,130,211), (66,132,212), (69,134,213), (72,136,214), (75,138,214), (78,141,215), (81,143,216), (85,145,217), (88,147,217), (91,149,218), (94,152,219), (97,154,220), (100,156,221), (103,158,221), (106,161,222), (109,163,223), (112,165,224), (115,167,224), (118,169,225), (121,172,226), (124,174,227), (127,176,228), (130,178,228), (133,180,229), (137,183,230), (140,185,231), (143,187,231), (146,189,232), (149,191,233), (152,194,234), (155,196,235), (158,198,235), (161,200,236), (164,202,237), (167,205,238), (170,207,238), (173,209,239), (176,211,240), (179,214,241), (182,216,242), (185,218,242), (189,220,243), (192,222,244), (195,225,245), (198,227,245), (201,229,246), (204,231,247), (207,233,248), (210,236,249), (213,238,249), (216,240,250), (219,242,251), (222,244,252), (225,247,252), (228,249,253), (231,251,254), (234,253,255), (237,255,255), (238,254,251), (238,252,246), (238,251,242), (239,249,237), (239,248,233), (239,246,228), (240,245,224), (240,243,219), (240,242,215), (241,240,210), (241,239,205), (241,237,201), (242,236,196), (242,234,192), (242,233,187), (243,231,183), (243,230,178), (243,228,174), (244,227,169), (244,225,164), (244,224,160), (245,222,155), (245,221,151), (245,219,146), (246,218,142), (246,216,137), (246,215,133), (246,213,128), (247,211,123), (247,210,119), (247,208,114), (248,207,110), (248,205,105), (248,204,101), (249,202,96), (249,201,92), (249,199,87), (250,198,82), (250,196,78), (250,195,73), (251,193,69), (251,192,64), (251,190,60), (252,189,55), (252,187,51), (252,186,46), (253,184,41), (253,183,37), (253,181,32), (254,180,28), (254,178,23), (254,177,19), (255,175,14), (255,174,10), (255,172,5), (255,170,0), (251,167,0), (246,164,0), (242,161,0), (237,158,0), (232,155,0), (228,152,0), (223,149,0), (218,146,0), (214,143,0), (209,140,0), (204,137,0), (200,134,0), (195,131,0), (191,128,0), (186,125,0), (181,122,0), (177,119,0), (172,116,0), (167,112,0), (163,109,0), (158,106,0), (153,103,0), (149,100,0), (144,97,0), (140,94,0), (135,91,0), (130,88,0), (126,85,0), (121,82,0), (116,79,0), (112,76,0), (107,73,0), (102,70,0), (98,67,0), (93,64,0), (89,61,0), (84,57,0), (79,54,0), (75,51,0), (70,48,0), (65,45,0), (61,42,0), (56,39,0), (51,36,0), (47,33,0), (42,30,0), (38,27,0), (33,24,0), (28,21,0), (24,18,0), (19,15,0), (14,12,0), (10,9,0), (5,6,0), (0,2,0), (0,2,0), (0,2,0), (0,2,0), (0,2,0), (0,2,0), (0,2,0), (0,2,0), (0,2,0), (0,2,0), (0,2,0), (0,2,0), (0,2,0), (0,2,0), (0,2,0), (0,2,0), (0,2,0), (0,2,0), (0,1,0), (0,1,0), (0,1,0), (0,1,0), (0,1,0), (0,1,0), (0,1,0), (0,1,0), (0,1,0), (0,1,0), (0,1,0), (0,1,0), (0,1,0), (0,1,0), (0,1,0), (0,1,0), (0,1,0), (0,1,0)];

fn main() {
    let center_r = -0.7438967436263865;
    let center_i = -0.13170710837611319;
    let scope = 0.001;

    let iters = 255;
    let size = 20000;
        
    let path = Path::new(r"8bit-rgb.png");
    let file = File::create(path).unwrap();
    let ref mut w = BufWriter::new(file);

    let mut encoder = png::Encoder::new(w, size, size); // Width is 2 pixels and height is 1.
    encoder.set_color(png::ColorType::RGB);
    encoder.set_depth(png::BitDepth::Eight);
    //encoder.set_compression(png::Compression::Best);
    let mut writer = encoder.write_header().unwrap();

    let data: Vec<u8> = coordinates(size).map(|(x,y)| {
        let val = mb_does_diverge(Complex(
            (x as f32 / size as f32 * scope) - (-center_r + (scope / 2.0)),
            (y as f32 / size as f32 * scope) - (-center_i + (scope / 2.0)),
        ), iters);
        vec![val.0, val.1, val.2]
    }).flatten().collect();

    writer.write_image_data(&data).unwrap();
}

fn mb_does_diverge(c: Compl, iters: u32) -> (u8, u8, u8) {
    let mut z = c;
    for i in 0..iters {
        z = z.pow(2) + c;
        if z.abs_sq() >= 4.0 {
            return COLORS[((i as f32/ iters as f32) * 255.0) as usize]
        }
    }

    return (0,0,0);
}

fn coordinates(size: u32) -> impl ParallelIterator<Item = (u32, u32)> {
    (0..size).into_par_iter().map(move |i| (0..size).into_par_iter().map(move |r| (r,i))).flatten()
}